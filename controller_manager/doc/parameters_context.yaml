hardware_components_initial_state: |
    Map of parameters for controlled lifecycle management of hardware components.
    The names of the components are defined as attribute of ``<ros2_control>``-tag in ``robot_description``.
    Hardware components found in ``robot_description``, but without explicit state definition will be immediately activated.
    Detailed explanation of each parameter is given below.
    The full structure of the map is given in the following example:

    .. code-block:: yaml

        hardware_components_initial_state:
          unconfigured:
            - "arm1"
            - "arm2"
          inactive:
            - "base3"

diagnostics.threshold.controllers.periodicity: |
  The ``periodicity`` diagnostics will be published for the asynchronous controllers, because any affect to the synchronous controllers will be reflected directly in the controller manager's periodicity. It is also published for the synchronous controllers that have a different update rate than the controller manager update rate.

diagnostics.threshold.controllers.execution_time.mean_error: |
  The ``execution_time`` diagnostics will be published for all controllers. The ``mean_error`` for a synchronous controller will be computed against zero, as it should be as low as possible. However, the ``mean_error`` for an asynchronous controller will be computed against the controller's desired update period, as the controller can take a maximum of the desired period to execute its update cycle.

diagnostics.threshold.hardware_components.periodicity: |
  The ``periodicity`` diagnostics will be published for the asynchronous hardware components, because any affect to the synchronous hardware components will be reflected directly in the controller manager's periodicity. It is also published for the synchronous hardware components that have a different read/write rate than the controller manager update rate.

diagnostics.threshold.hardware_components.execution_time.mean_error: |
  The ``execution_time`` diagnostics will be published for all hardware components. The ``mean_error`` for a synchronous hardware component will be computed against zero, as it should be as low as possible. However, the ``mean_error`` for an asynchronous hardware component will be computed against its desired read/write period, as the hardware component can take a maximum of the desired period to execute the read/write cycle.
